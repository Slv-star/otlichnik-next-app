import React, { useState } from "react";

// Quiz data with questions, options, and answers
const quizData = [
  {
    question: "–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ '–û—Ç–ª–∏—á–Ω–∏–∫' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ—Ä–∞–∑—ã '–°–∏–¥–∏ —Ä–æ–≤–Ω–µ–π, –ø–∏—à–∏ –±—ã—Å—Ç—Ä–µ–µ!'?",
    options: ["–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
    answer: 1,
  },
  {
    question: "–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä?",
    options: [
      "–ö–∞–∫ —Å—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º",
      "–ü–µ—Ä–µ–º–µ–Ω—ã",
      "–ò—Å–∫—É—Å—Å—Ç–≤–æ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏",
      "–û–Ω —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –í—Å–µ–≥–¥–∞. –í–µ–∑–¥–µ."
    ],
    answer: 3,
  },
  {
    question: "–ß—Ç–æ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–º–∞—Ä–∫–µ —à–∫–æ–ª—ã '–û—Ç–ª–∏—á–Ω–∏–∫'?",
    options: [
      "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
      "–í–æ–ª—à–µ–±–Ω—ã–µ –ø—è—Ç—ë—Ä–∫–∏",
      "–§—É—Ç–±–æ–ª–∫–∏, —Ä—É—á–∫–∏, —à–æ–ø–µ—Ä—ã, –º–∞–≥–Ω–∏—Ç—ã",
      "–ö–æ—Ç–ª–µ—Ç—ã –∏–∑ —Å—Ç–æ–ª–æ–≤–∫–∏"
    ],
    answer: 2,
  },
  {
    question: "–ö–∞–∫–æ–π –¥–µ–≤–∏–∑ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞ '–û—Ç–ª–∏—á–Ω–∏–∫–∞'?",
    options: [
      "–£—á–µ–Ω—å–µ ‚Äî —Å–≤–µ—Ç, –∞ –ª–µ–Ω—å ‚Äî –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      "–ü—è—Ç—ë—Ä–∫–∏ ‚Äî —ç—Ç–æ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏",
      "–ü—Ä–æ–ø—É—Å—Ç–∏–ª ‚Äî –ø–µ—Ä–µ—Å–¥–∞–ª, –ø—Ä–æ—Å–ø–∞–ª ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–ª",
      "–ì–ª–∞–≤–Ω–æ–µ ‚Äî —É—á–∞—Å—Ç–∏–µ"
    ],
    answer: 1,
  },
  {
    question: "–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ '–û—Ç–ª–∏—á–Ω–∏–∫'?",
    options: [
      "–°–¥–∞—Ç—å —Å—É–ø–µ—Ä-—ç–∫–∑–∞–º–µ–Ω",
      "–ö—É–ø–∏—Ç—å —Ä—É—á–∫—É –Ω–∞ —è—Ä–º–∞—Ä–∫–µ",
      "–ü—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ—Ç–µ—Ç—å —É—á–∏—Ç—å—Å—è",
      "–ü–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å —á–µ—Ä–µ–∑ –ª—É–∂—É —É –≤—Ö–æ–¥–∞ –∏ —Ç—Ä–∏–∂–¥—ã —Å–∫–∞–∑–∞—Ç—å '–ø—è—Ç—ë—Ä–∫–∞'"
    ],
    answer: 2,
  },
  {
    question: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä—É—á–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é '–°–∏–¥–∏ —Ä–æ–≤–Ω–µ–π, –ø–∏—à–∏ –±—ã—Å—Ç—Ä–µ–µ!'?",
    options: ["–ë–µ—Å–ø–ª–∞—Ç–Ω–æ, –µ—Å–ª–∏ —Å–∏–¥–∏—à—å –ø—Ä—è–º–æ", "100 —Ä—É–±.", "200 —Ä—É–±.", "500 –±–∞–ª–ª–æ–≤ —É–≤–∞–∂–µ–Ω–∏—è"],
    answer: 2,
  },
  {
    question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞–¥–ø–∏—Å—å '–Ø ‚ù§Ô∏è –û—Ç–ª–∏—á–Ω–∏–∫' –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ?",
    options: [
      "–≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ª—é–±–≤–∏ –∫ —É—á—ë–±–µ",
      "–≠—Ç–æ –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø—è—Ç—ë—Ä–∫–∏",
      "–≠—Ç–æ –ª–æ–∑—É–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —è—Ä–º–∞—Ä–∫–∏",
      "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"
    ],
    answer: 3,
  },
  {
    question: "–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö?",
    options: ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–ü–µ–Ω–∞–ª", "–†—É—á–∫–∞ '–û—Ç–ª–∏—á–Ω–∏–∫'", "–î–æ–º–∞—à–∫–∞"],
    answer: 2,
  },
  {
    question: "–ö–∞–∫–∞—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É —Ñ—É—Ç–±–æ–ª–∫–∏ '–û—Ç–ª–∏—á–Ω–∏–∫'?",
    options: [
      "–î–µ–ª–∞–µ—Ç –Ω–æ—Å–∏—Ç–µ–ª—è –æ—Ç–ª–∏—á–Ω–∏–∫–æ–º",
      "–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –Ω–µ–≤–∏–¥–∏–º–∫–æ–π –Ω–∞ —É—Ä–æ–∫–∞—Ö",
      "–°–≤–µ—Ç–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —Ç–µ—Ç—Ä–∞–¥–µ–π",
      "–î–∞—ë—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö"
    ],
    answer: 0,
  },
  {
    question: "–ö—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–∞ —è—Ä–º–∞—Ä–∫—É —à–∫–æ–ª—ã '–û—Ç–ª–∏—á–Ω–∏–∫'?",
    options: [
      "–¢–æ–ª—å–∫–æ –∫—Ä—É–≥–ª—ã–µ –æ—Ç–ª–∏—á–Ω–∏–∫–∏",
      "–†–æ–¥–∏—Ç–µ–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤",
      "–í—Å–µ –∂–µ–ª–∞—é—â–∏–µ!",
      "–¢–æ–ª—å–∫–æ –ª—é–±–∏—Ç–µ–ª–∏ –∫–∞–ø–∏–±–∞—Ä"
    ],
    answer: 2,
  },
];

export default function App() {
  // State for tracking current question, score, and whether to show results
  const [current, setCurrent] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [isAnimating, setIsAnimating] = useState(false);

  // Handle answer selection
  const handleAnswer = (index: number) => {
    setSelectedOption(index);
    setIsAnimating(true);
    
    // Delay to show the selected answer before moving to next question
    setTimeout(() => {
      // Check if current index is valid before accessing
      const currentQuestionData = current < quizData.length ? quizData[current] : null;
      if (currentQuestionData && index === currentQuestionData.answer) {
        setScore(score + 1);
      }
      
      const next = current + 1;
      if (next < quizData.length) {
        setCurrent(next);
        setSelectedOption(null);
      } else {
        setShowResult(true);
      }
      setIsAnimating(false);
    }, 500);
  };

  // Get personalized result message based on score
  const getResult = () => {
    if (score === 10) return "–õ–µ–≥–µ–Ω–¥–∞ '–û—Ç–ª–∏—á–Ω–∏–∫–∞' üéì ‚Äî —Ç—ã –∫–æ—Ä–æ–ª—å –¥–Ω–µ–≤–Ω–∏–∫–∞ –∏ –¥—É—à–∞ —è—Ä–º–∞—Ä–∫–∏!";
    if (score >= 8) return "–ì–æ—Ä–¥–æ—Å—Ç—å —à–∫–æ–ª—ã ‚ú® ‚Äî –ø–æ—á—Ç–∏ –≤—Å—ë –∑–Ω–∞–µ—à—å, –¥–∞–∂–µ –±–µ–∑ —à–ø–∞—Ä–≥–∞–ª–æ–∫!";
    if (score >= 5) return "–°–∫—Ä—ã—Ç—ã–π –æ—Ç–ª–∏—á–Ω–∏–∫ üòâ ‚Äî —Ç—ã –Ω–∞ –ø—É—Ç–∏ –∫ –≤–µ—Ä—à–∏–Ω–µ!";
    if (score >= 2) return "–ì–æ—Å—Ç—å —è—Ä–º–∞—Ä–∫–∏ üõçÔ∏è ‚Äî –Ω–æ —è–≤–Ω–æ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞!";
    return "–ö–∞–ø–∏–±–∞—Ä–∞-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ ü¶´ ‚Äî —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –≤–µ—Å–µ–ª–æ!";
  };

  // Restart the quiz
  const restartQuiz = () => {
    setCurrent(0);
    setScore(0);
    setShowResult(false);
    setSelectedOption(null);
  };

  // Calculate progress percentage
  const progressPercentage = ((current) / quizData.length) * 100;

  // Make sure we have a valid current question
  const currentQuestion = current < quizData.length ? quizData[current] : null;

  return (
    <div className="quiz-container">
      {showResult ? (
        <div className="result">
          <h2>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
          <p>{getResult()}</p>
          <p>–í–∞—à —Å—á—ë—Ç: {score} –∏–∑ {quizData.length}</p>
          <button onClick={restartQuiz}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      ) : currentQuestion ? (
        <div className="question-container">
          <h2>{currentQuestion.question}</h2>
          <div className="options">
            {currentQuestion.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswer(index)}
                className={`option-button ${selectedOption === index ? "selected" : ""}`}
              >
                {option}
              </button>
            ))}
          </div>
          <div className="progress">
            <p>–í–æ–ø—Ä–æ—Å {current + 1} –∏–∑ {quizData.length}</p>
            <div className="progress-bar" style={{ width: `${progressPercentage}%` }}></div>
          </div>
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      )}
    </div>
  );
}
